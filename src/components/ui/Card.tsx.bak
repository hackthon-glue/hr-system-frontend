import React from 'react';
import { cn } from '@/lib/utils';

// カードコンポーネント
interface CardProps extends React.HTMLAttributes<HTMLDivElement> {
  padding?: 'none' | 'sm' | 'md' | 'lg';
  shadow?: 'none' | 'sm' | 'md' | 'lg';
  hover?: boolean;
}

export const Card: React.FC<CardProps> = ({
  children,
  className,
  padding = 'md',
  shadow = 'sm',
  hover = false,
  ...props
}) => {
  const paddings = {
    none: '',
    sm: 'p-3',
    md: 'p-4',
    lg: 'p-6',
  };

  const shadows = {
    none: '',
    sm: 'shadow-sm',
    md: 'shadow-md',
    lg: 'shadow-lg',
  };

  return (
    <div
      className={cn(
        'bg-white rounded-lg border border-gray-200',
        'transition-all duration-200',
        paddings[padding],
        shadows[shadow],
        hover && 'hover:shadow-md hover:border-gray-300 cursor-pointer',
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
};

// カードヘッダー
interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {
  title?: string;
  subtitle?: string;
  action?: React.ReactNode;
}

export const CardHeader: React.FC<CardHeaderProps> = ({
  title,
  subtitle,
  action,
  children,
  className,
  ...props
}) => {
  return (
    <div
      className={cn(
        'flex items-start justify-between mb-4',
        className
      )}
      {...props}
    >
      <div className="flex-1">
        {title && (
          <h3 className="text-lg font-semibold text-gray-900">
            {title}
          </h3>
        )}
        {subtitle && (
          <p className="text-sm text-gray-600 mt-1">
            {subtitle}
          </p>
        )}
        {children}
      </div>
      {action && (
        <div className="ml-4">
          {action}
        </div>
      )}
    </div>
  );
};

// カードボディ
interface CardBodyProps extends React.HTMLAttributes<HTMLDivElement> {}

export const CardBody: React.FC<CardBodyProps> = ({
  children,
  className,
  ...props
}) => {
  return (
    <div className={cn('text-gray-700', className)} {...props}>
      {children}
    </div>
  );
};

// カードフッター
interface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {
  align?: 'left' | 'center' | 'right' | 'between';
}

export const CardFooter: React.FC<CardFooterProps> = ({
  children,
  className,
  align = 'right',
  ...props
}) => {
  const alignments = {
    left: 'justify-start',
    center: 'justify-center',
    right: 'justify-end',
    between: 'justify-between',
  };

  return (
    <div
      className={cn(
        'flex items-center gap-2 mt-4 pt-4',
        'border-t border-gray-200',
        alignments[align],
        className
      )}
      {...props}
    >
      {children}
    </div>
  );
};

// ステータスカード（SmartHR風）
interface StatusCardProps extends CardProps {
  status?: 'info' | 'success' | 'warning' | 'danger';
  icon?: React.ReactNode;
  title: string;
  description?: string;
}

export const StatusCard: React.FC<StatusCardProps> = ({
  status = 'info',
  icon,
  title,
  description,
  children,
  className,
  ...props
}) => {
  const statusColors = {
    info: 'border-l-blue-500',
    success: 'border-l-green-500',
    warning: 'border-l-yellow-500',
    danger: 'border-l-red-500',
  };

  const statusBgColors = {
    info: 'bg-blue-50',
    success: 'bg-green-50',
    warning: 'bg-yellow-50',
    danger: 'bg-red-50',
  };

  const statusIconColors = {
    info: 'text-blue-500',
    success: 'text-green-500',
    warning: 'text-yellow-500',
    danger: 'text-red-500',
  };

  return (
    <Card
      className={cn(
        'border-l-4',
        statusColors[status],
        statusBgColors[status],
        className
      )}
      {...props}
    >
      <div className="flex items-start gap-4">
        {icon && (
          <div className={cn('flex-shrink-0', statusIconColors[status])}>
            {icon}
          </div>
        )}
        <div className="flex-1">
          <h4 className="font-semibold text-gray-900">
            {title}
          </h4>
          {description && (
            <p className="text-sm text-gray-600 mt-1">
              {description}
            </p>
          )}
          {children && <div className="mt-2">{children}</div>}
        </div>
      </div>
    </Card>
  );
};

// メトリクスカード（数値表示用）
interface MetricCardProps extends CardProps {
  label: string;
  value: string | number;
  change?: {
    value: string | number;
    trend: 'up' | 'down' | 'neutral';
  };
  icon?: React.ReactNode;
}

export const MetricCard: React.FC<MetricCardProps> = ({
  label,
  value,
  change,
  icon,
  className,
  ...props
}) => {
  const trendColors = {
    up: 'text-green-600',
    down: 'text-red-600',
    neutral: 'text-gray-600',
  };

  const TrendIcon = ({ trend }: { trend: 'up' | 'down' | 'neutral' }) => {
    if (trend === 'up') {
      return (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
        </svg>
      );
    }
    if (trend === 'down') {
      return (
        <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 17h8m0 0v-8m0 8l-8-8-4 4-6-6" />
        </svg>
      );
    }
    return (
      <svg className="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h14" />
      </svg>
    );
  };

  return (
    <Card className={cn('p-4', className)} shadow="sm" padding="none" {...props}>
      <div className="flex items-start justify-between">
        <div className="flex-1">
          <p className="text-sm text-gray-600 mb-1">
            {label}
          </p>
          <p className="text-2xl font-bold text-gray-900">
            {value}
          </p>
          {change && (
            <div className={cn('flex items-center gap-1 mt-2', trendColors[change.trend])}>
              <TrendIcon trend={change.trend} />
              <span className="text-sm font-medium">{change.value}</span>
            </div>
          )}
        </div>
        {icon && (
          <div className="flex-shrink-0 p-2 bg-blue-100 rounded-lg">
            <div className="text-blue-600">
              {icon}
            </div>
          </div>
        )}
      </div>
    </Card>
  );
};
