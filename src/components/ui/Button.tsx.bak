import React from 'react';
import { cn } from '@/lib/utils';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger' | 'success';
  size?: 'xs' | 'sm' | 'md' | 'lg';
  loading?: boolean;
  fullWidth?: boolean;
  icon?: React.ReactNode;
  iconPosition?: 'left' | 'right';
}

export const Button: React.FC<ButtonProps> = ({
  children,
  className,
  variant = 'primary',
  size = 'md',
  loading = false,
  fullWidth = false,
  icon,
  iconPosition = 'left',
  disabled,
  ...props
}) => {
  // SmartHR風のベーススタイル
  const baseStyles = 'inline-flex items-center justify-center font-medium transition-all duration-200 border border-transparent focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed';

  const variants = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700 hover:shadow-md focus-visible:ring-blue-500 disabled:bg-gray-300 disabled:text-gray-500',
    secondary: 'bg-gray-100 text-gray-900 hover:bg-gray-200 hover:shadow-sm focus-visible:ring-gray-500 disabled:bg-gray-100 disabled:text-gray-400',
    outline: 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400 focus-visible:ring-blue-500 disabled:bg-white disabled:text-gray-400 disabled:border-gray-200',
    ghost: 'bg-transparent text-gray-700 hover:bg-gray-100 focus-visible:ring-gray-500 disabled:text-gray-400',
    danger: 'bg-red-600 text-white hover:bg-red-700 hover:shadow-md focus-visible:ring-red-500 disabled:bg-gray-300 disabled:text-gray-500',
    success: 'bg-green-600 text-white hover:bg-green-700 hover:shadow-md focus-visible:ring-green-500 disabled:bg-gray-300 disabled:text-gray-500',
  };

  const sizes = {
    xs: 'px-2.5 py-1 text-xs rounded gap-1',
    sm: 'px-3 py-1.5 text-sm rounded gap-1.5',
    md: 'px-4 py-2 text-sm rounded-md gap-2',
    lg: 'px-6 py-2.5 text-base rounded-md gap-2.5',
  };

  const LoadingSpinner = () => (
    <svg
      className={cn(
        "animate-spin",
        size === 'xs' && "h-3 w-3",
        size === 'sm' && "h-3.5 w-3.5",
        size === 'md' && "h-4 w-4",
        size === 'lg' && "h-5 w-5"
      )}
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
    >
      <circle
        className="opacity-25"
        cx="12"
        cy="12"
        r="10"
        stroke="currentColor"
        strokeWidth="4"
      />
      <path
        className="opacity-75"
        fill="currentColor"
        d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
      />
    </svg>
  );

  const IconComponent = () => {
    if (loading) return <LoadingSpinner />;
    if (icon) return <span className="flex items-center">{icon}</span>;
    return null;
  };

  return (
    <button
      className={cn(
        baseStyles,
        variants[variant],
        sizes[size],
        fullWidth && 'w-full',
        'shadow-sm',
        className
      )}
      disabled={loading || disabled}
      {...props}
    >
      {(loading || icon) && iconPosition === 'left' && <IconComponent />}
      {children && <span>{children}</span>}
      {icon && !loading && iconPosition === 'right' && <IconComponent />}
    </button>
  );
};

// ボタングループコンポーネント
interface ButtonGroupProps {
  children: React.ReactNode;
  className?: string;
}

export const ButtonGroup: React.FC<ButtonGroupProps> = ({ children, className }) => {
  return (
    <div className={cn('inline-flex rounded-md shadow-sm', className)}>
      {React.Children.map(children, (child, index) => {
        if (React.isValidElement(child)) {
          const isFirst = index === 0;
          const isLast = index === React.Children.count(children) - 1;

          return React.cloneElement(child as React.ReactElement<any>, {
            className: cn(
              child.props.className,
              !isFirst && '-ml-px',
              !isFirst && !isLast && 'rounded-none',
              isFirst && 'rounded-r-none',
              isLast && 'rounded-l-none'
            ),
          });
        }
        return child;
      })}
    </div>
  );
};