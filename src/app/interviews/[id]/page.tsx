'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import { useTranslations } from 'next-intl';
import Link from 'next/link';
import { Button } from '@/components/ui/Button';
import { Card, CardHeader, CardBody } from '@/components/ui/Card';
import { interviewService, Interview, InterviewQuestion, InterviewAnswer } from '@/lib/api/interviews';

export default function InterviewPage() {
  const t = useTranslations();
  const router = useRouter();
  const params = useParams();
  const interviewId = parseInt(params.id as string);

  const [interview, setInterview] = useState<Interview | null>(null);
  const [loading, setLoading] = useState(true);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [currentAnswer, setCurrentAnswer] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isComplete, setIsComplete] = useState(false);
  const [sessionId, setSessionId] = useState<string | null>(null);
  const [isGeneratingQuestions, setIsGeneratingQuestions] = useState(false);

  // Questions dynamically generated by Agent
  const [questions, setQuestions] = useState<InterviewQuestion[]>([]);

  useEffect(() => {
    fetchInterview();
  }, [interviewId]);

  const fetchInterview = async () => {
    try {
      const data = await interviewService.getInterview(interviewId);
      setInterview(data);

      // Generate questions from Agent
      await generateQuestions();
    } catch (error) {
      console.error('Error fetching interview:', error);
      alert('Failed to fetch interview information');
    } finally {
      setLoading(false);
    }
  };

  const generateQuestions = async () => {
    setIsGeneratingQuestions(true);
    try {
      const response = await interviewService.generateQuestions(interviewId);

      console.log('Generated questions response:', response);

      // Save session ID for conversation history continuity
      if (response.session_id) {
        setSessionId(response.session_id);
      }

      // Extract questions from response (already parsed by backend)
      let generatedQuestions: InterviewQuestion[] = [];

      if (response.questions) {
        // Process according to data structure returned from backend
        if (Array.isArray(response.questions)) {
          // Array format
          generatedQuestions = response.questions;
        } else if (typeof response.questions === 'object' && response.questions.questions) {
          // { questions: [...] } format
          generatedQuestions = response.questions.questions;
        } else if (typeof response.questions === 'object') {
          // Object but not array - treat as question list
          generatedQuestions = [response.questions];
        }
      }

      // Set questions if successfully generated
      if (generatedQuestions.length > 0) {
        // Add interviewId and interview fields
        const questionsWithInterview = generatedQuestions.map((q, index) => ({
          ...q,
          id: q.id || index + 1,
          interview: interviewId,
          order: q.order || index + 1
        }));
        setQuestions(questionsWithInterview);
        console.log('Questions set successfully:', questionsWithInterview.length, 'questions');
      } else {
        // Use fallback questions if generation fails
        console.warn('No questions generated, using fallback questions');
        alert('Failed to generate AI questions. Using default questions.');
        setQuestions(getFallbackQuestions());
      }
    } catch (error) {
      console.error('Error generating questions:', error);
      const err = error as { response?: { data?: { detail?: string } }; message?: string };
      const errorMessage = err.response?.data?.detail || err.message || 'Failed to generate questions';
      alert(`Failed to generate questions: ${errorMessage}\nUsing default questions.`);
      setQuestions(getFallbackQuestions());
    } finally {
      setIsGeneratingQuestions(false);
    }
  };

  const getFallbackQuestions = (): InterviewQuestion[] => {
    return [
      {
        id: 1,
        interview: interviewId,
        question_text: 'Please tell us about your work experience. In particular, describe your role and achievements in team projects.',
        question_type: 'experience',
        difficulty: 'medium',
        order: 1,
        expected_answer: 'Answer including specific experience and achievements',
        evaluation_criteria: 'Specificity, logic, communication skills'
      },
      {
        id: 2,
        interview: interviewId,
        question_text: 'How do you approach technical challenges? Please explain with a specific example.',
        question_type: 'technical',
        difficulty: 'medium',
        order: 2,
        expected_answer: 'Problem-solving process and specific examples',
        evaluation_criteria: 'Problem-solving ability, technical skills, logical thinking'
      },
      {
        id: 3,
        interview: interviewId,
        question_text: 'Why did you apply for this position, and what is your career vision for the next 5 years?',
        question_type: 'motivation',
        difficulty: 'easy',
        order: 3,
        expected_answer: 'Motivation and career plan',
        evaluation_criteria: 'Motivation, career awareness, company understanding'
      },
      {
        id: 4,
        interview: interviewId,
        question_text: 'How do you handle disagreements with team members?',
        question_type: 'behavioral',
        difficulty: 'medium',
        order: 4,
        expected_answer: 'Interpersonal skills and problem-solving approach',
        evaluation_criteria: 'Communication, cooperation, problem-solving'
      },
      {
        id: 5,
        interview: interviewId,
        question_text: 'Tell us about the project or achievement you are most proud of. What was your role and what did you learn?',
        question_type: 'achievement',
        difficulty: 'medium',
        order: 5,
        expected_answer: 'Specific achievements and learnings',
        evaluation_criteria: 'Achievement orientation, self-awareness, learning ability'
      }
    ];
  };

  const handleLogout = () => {
    if (typeof window !== 'undefined') {
      localStorage.removeItem('access_token');
      localStorage.removeItem('refresh_token');
    }
    router.push('/login');
  };

  const handleNext = () => {
    if (!currentAnswer.trim()) {
      alert('Please enter your answer');
      return;
    }

    // Save current answer
    setAnswers({
      ...answers,
      [currentQuestionIndex]: currentAnswer
    });

    // Move to next question
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
      setCurrentAnswer(answers[currentQuestionIndex + 1] || '');
    }
  };

  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setAnswers({
        ...answers,
        [currentQuestionIndex]: currentAnswer
      });
      setCurrentQuestionIndex(currentQuestionIndex - 1);
      setCurrentAnswer(answers[currentQuestionIndex - 1] || '');
    }
  };

  const handleSubmit = async () => {
    if (!currentAnswer.trim()) {
      alert('Please enter your answer');
      return;
    }

    if (!confirm('Are you sure you want to complete the interview? You cannot edit after submission.')) {
      return;
    }

    setIsSubmitting(true);

    try {
      // Save final answer
      const finalAnswers = {
        ...answers,
        [currentQuestionIndex]: currentAnswer
      };

      // Submit all answers to Agent for evaluation
      await interviewService.submitAnswers(interviewId, {
        answers: finalAnswers,
        questions: questions,
        session_id: sessionId || undefined
      });

      setIsComplete(true);
      alert('Interview completed. AI is evaluating your answers. Results will be sent later.');
      router.push('/applications');
    } catch (error) {
      console.error('Error submitting interview:', error);
      alert('Submission failed. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (loading || isGeneratingQuestions) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center">
        <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-600 border-t-transparent"></div>
        <p className="mt-4 text-gray-600 font-medium">
          {isGeneratingQuestions ? 'AI is generating interview questions...' : 'Loading...'}
        </p>
        {isGeneratingQuestions && (
          <p className="mt-2 text-sm text-gray-500">
            Creating optimal questions based on job information
          </p>
        )}
      </div>
    );
  }

  if (isComplete) {
    return (
      <div className="min-h-screen bg-gray-50 flex flex-col items-center justify-center">
        <Card className="max-w-2xl w-full mx-4">
          <CardBody className="p-12 text-center">
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-10 h-10 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h1 className="text-2xl font-bold text-gray-900 mb-4">Interview Completed</h1>
            <p className="text-gray-600 mb-8">
              Thank you for participating in the interview.<br />
              Results will be sent to you later.
            </p>
            <Link href="/applications">
              <Button>Back to Applications</Button>
            </Link>
          </CardBody>
        </Card>
      </div>
    );
  }

  const currentQuestion = questions[currentQuestionIndex];
  const progress = ((currentQuestionIndex + 1) / questions.length) * 100;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Navigation */}
      <nav className="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16">
            <div className="flex items-center gap-8">
              <Link href="/dashboard" className="flex items-center gap-2">
                <div className="w-8 h-8 bg-blue-600 rounded-md flex items-center justify-center">
                  <span className="text-white font-bold text-lg">HR</span>
                </div>
                <span className="text-lg font-semibold text-gray-900">Agent System</span>
              </Link>
              <div className="flex items-center gap-2 text-sm text-gray-600">
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
                <span>In Interview</span>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <Button variant="outline" size="sm" onClick={handleLogout}>
                Logout
              </Button>
            </div>
          </div>
        </div>
      </nav>

      <main className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-700">
              Question {currentQuestionIndex + 1} / {questions.length}
            </span>
            <span className="text-sm font-medium text-blue-600">
              {Math.round(progress)}% Complete
            </span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${progress}%` }}
            ></div>
          </div>
        </div>

        {/* Interview Info */}
        {interview && (
          <Card className="mb-6">
            <CardBody className="p-6">
              <div className="flex items-center gap-4">
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
                <div>
                  <h2 className="text-lg font-semibold text-gray-900">
                    {interview.interview_type === 'technical' ? 'Technical Interview' :
                     interview.interview_type === 'hr' ? 'HR Interview' :
                     interview.interview_type === 'final' ? 'Final Interview' : 'Interview'}
                  </h2>
                  <p className="text-sm text-gray-600">
                    Estimated Time: {interview.duration_minutes} minutes
                  </p>
                </div>
              </div>
            </CardBody>
          </Card>
        )}

        {/* Question Card */}
        <Card shadow="lg" className="mb-8">
          <CardHeader
            title={`Question ${currentQuestionIndex + 1}`}
          />
          <CardBody className="p-8">
            <div className="mb-6">
              <div className="flex items-start gap-3 mb-4">
                <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0">
                  <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="flex-1">
                  <p className="text-lg text-gray-900 leading-relaxed">
                    {currentQuestion.question_text}
                  </p>
                  <div className="mt-3 flex items-center gap-3">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {currentQuestion.question_type === 'technical' ? 'Technical' :
                       currentQuestion.question_type === 'experience' ? 'Experience' :
                       currentQuestion.question_type === 'motivation' ? 'Motivation' :
                       currentQuestion.question_type === 'behavioral' ? 'Behavioral' :
                       currentQuestion.question_type === 'achievement' ? 'Achievement' : 'Other'}
                    </span>
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      currentQuestion.difficulty === 'easy' ? 'bg-green-100 text-green-800' :
                      currentQuestion.difficulty === 'hard' ? 'bg-red-100 text-red-800' :
                      'bg-yellow-100 text-yellow-800'
                    }`}>
                      {currentQuestion.difficulty === 'easy' ? 'Easy' :
                       currentQuestion.difficulty === 'hard' ? 'Hard' : 'Medium'}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-700 mb-3">
                Please enter your answer
              </label>
              <textarea
                value={currentAnswer}
                onChange={(e) => setCurrentAnswer(e.target.value)}
                rows={12}
                className="w-full rounded-lg border-gray-300 shadow-sm focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition px-4 py-3"
                placeholder="Enter your answer here..."
              />
              <p className="mt-2 text-sm text-gray-500">
                Please answer as specifically and clearly as possible.
              </p>
            </div>

            {/* Navigation Buttons */}
            <div className="flex items-center justify-between pt-6 border-t border-gray-200">
              <Button
                variant="outline"
                onClick={handlePrevious}
                disabled={currentQuestionIndex === 0}
              >
                <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                Previous
              </Button>

              <div className="flex gap-3">
                {currentQuestionIndex < questions.length - 1 ? (
                  <Button onClick={handleNext}>
                    Next Question
                    <svg className="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                    </svg>
                  </Button>
                ) : (
                  <Button
                    onClick={handleSubmit}
                    disabled={isSubmitting}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    {isSubmitting ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2"></div>
                        Submitting...
                      </>
                    ) : (
                      <>
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                        </svg>
                        Complete Interview
                      </>
                    )}
                  </Button>
                )}
              </div>
            </div>
          </CardBody>
        </Card>

        {/* Tips Card */}
        <Card>
          <CardBody className="p-6">
            <div className="flex items-start gap-3">
              <svg className="w-5 h-5 text-blue-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <div>
                <h3 className="text-sm font-medium text-gray-900 mb-2">Interview Tips</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>• Providing specific examples makes your answers more convincing</li>
                  <li>• Using the STAR method (Situation, Task, Action, Result) helps organize your answers</li>
                  <li>• It&apos;s important to answer honestly in your own words</li>
                  <li>• You can go back to previous questions to revise your answers</li>
                </ul>
              </div>
            </div>
          </CardBody>
        </Card>
      </main>
    </div>
  );
}
