'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useRouter } from 'next/navigation';
import { useTranslations } from 'next-intl';
import Link from 'next/link';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Select } from '@/components/ui/Input';
import { Card, CardBody } from '@/components/ui/Card';
import { authService } from '@/lib/api/auth';

export default function RegisterPage() {
  const t = useTranslations();
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const registerSchema = z.object({
    email: z.string().email(t('auth.emailValidation')),
    password: z.string().min(6, t('auth.passwordMinLength')),
    password_confirm: z.string(),
    first_name: z.string().min(1, t('errors.required')),
    last_name: z.string().min(1, t('errors.required')),
    first_name_kana: z.string().optional(),
    last_name_kana: z.string().optional(),
    role: z.enum(['candidate', 'recruiter']),
    phone: z.string().optional(),
  }).refine((data) => data.password === data.password_confirm, {
    message: t('auth.passwordMismatch'),
    path: ["password_confirm"],
  });

  type RegisterFormData = z.infer<typeof registerSchema>;

  const {
    register,
    handleSubmit,
    formState: { errors },
    watch,
  } = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      role: 'candidate',
    },
  });

  const selectedRole = watch('role');

  const onSubmit = async (data: RegisterFormData) => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await authService.register(data);

      // Redirect based on user role
      if (response.user.role === 'recruiter') {
        router.push('/recruiter/dashboard');
      } else {
        router.push('/dashboard');
      }
    } catch (err) {
      const error = err as { response?: { data?: { message?: string } } };
      setError(err.response?.data?.message || t('auth.registerError'));
    } finally{
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-50 flex flex-col">
      {/* Header */}
      <header className="p-6">
        <Link href="/" className="flex items-center gap-2 w-fit">
          <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center shadow-md">
            <span className="text-white font-bold text-xl">HR</span>
          </div>
          <span className="text-xl font-bold text-gray-900">Agent System</span>
        </Link>
      </header>

      {/* Main Content */}
      <div className="flex-1 flex items-center justify-center px-4 py-12">
        <div className="w-full max-w-2xl">
          {/* Welcome Section */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-3">
              {t('auth.createAccount')}
            </h1>
            <p className="text-gray-600">
              {t('auth.registerWelcome')}
            </p>
          </div>

          {/* Register Card */}
          <Card shadow="lg" className="overflow-hidden">
            <CardBody className="p-8">
              <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
                {/* Error Message */}
                {error && (
                  <div className="bg-red-50 border-l-4 border-red-500 p-4 rounded-r-lg">
                    <div className="flex items-start">
                      <svg className="w-5 h-5 text-red-500 mt-0.5 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clipRule="evenodd" />
                      </svg>
                      <div className="flex-1">
                        <p className="text-sm font-medium text-red-800">{error}</p>
                      </div>
                    </div>
                  </div>
                )}

                {/* Role Selection - Prominent */}
                <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                  <label className="block text-sm font-semibold text-gray-900 mb-3">
                    {t('auth.selectAccountType')}
                  </label>
                  <div className="grid grid-cols-2 gap-3">
                    <label className={`relative flex items-center p-4 cursor-pointer rounded-lg border-2 transition-all ${
                      selectedRole === 'candidate'
                        ? 'border-blue-600 bg-white shadow-md'
                        : 'border-gray-300 bg-white hover:border-gray-400'
                    }`}>
                      <input
                        type="radio"
                        value="candidate"
                        {...register('role')}
                        className="sr-only"
                      />
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                          <span className="font-semibold text-gray-900">{t('auth.candidate')}</span>
                        </div>
                        <p className="text-xs text-gray-600">{t('auth.candidateDescription')}</p>
                      </div>
                      {selectedRole === 'candidate' && (
                        <svg className="w-5 h-5 text-blue-600 absolute top-3 right-3" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                      )}
                    </label>

                    <label className={`relative flex items-center p-4 cursor-pointer rounded-lg border-2 transition-all ${
                      selectedRole === 'recruiter'
                        ? 'border-blue-600 bg-white shadow-md'
                        : 'border-gray-300 bg-white hover:border-gray-400'
                    }`}>
                      <input
                        type="radio"
                        value="recruiter"
                        {...register('role')}
                        className="sr-only"
                      />
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-1">
                          <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                          </svg>
                          <span className="font-semibold text-gray-900">{t('auth.recruiter')}</span>
                        </div>
                        <p className="text-xs text-gray-600">{t('auth.recruiterDescription')}</p>
                      </div>
                      {selectedRole === 'recruiter' && (
                        <svg className="w-5 h-5 text-blue-600 absolute top-3 right-3" fill="currentColor" viewBox="0 0 20 20">
                          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                        </svg>
                      )}
                    </label>
                  </div>
                  {errors.role && (
                    <p className="text-sm text-red-600 mt-2">{errors.role.message}</p>
                  )}
                </div>

                {/* Name Fields */}
                <div className="grid grid-cols-2 gap-4">
                  <Input
                    {...register('last_name')}
                    label={t('auth.lastName')}
                    required
                    error={errors.last_name?.message}
                    placeholder="Yamada"
                  />
                  <Input
                    {...register('first_name')}
                    label={t('auth.firstName')}
                    required
                    error={errors.first_name?.message}
                    placeholder="Taro"
                  />
                </div>

                {/* Kana Fields */}
                <div className="grid grid-cols-2 gap-4">
                  <Input
                    {...register('last_name_kana')}
                    label={t('auth.lastNameKana')}
                    error={errors.last_name_kana?.message}
                    placeholder="Yamada"
                  />
                  <Input
                    {...register('first_name_kana')}
                    label={t('auth.firstNameKana')}
                    error={errors.first_name_kana?.message}
                    placeholder="Taro"
                  />
                </div>

                {/* Contact Information */}
                <div className="space-y-4">
                  <Input
                    {...register('email')}
                    type="email"
                    label={t('auth.email')}
                    required
                    error={errors.email?.message}
                    placeholder="example@company.com"
                    prefix={
                      <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                      </svg>
                    }
                  />

                  <Input
                    {...register('phone')}
                    type="tel"
                    label={t('auth.phoneOptional')}
                    helperText=""
                    error={errors.phone?.message}
                    placeholder="+1-234-567-8900"
                    prefix={
                      <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                      </svg>
                    }
                  />
                </div>

                {/* Password Fields */}
                <div className="space-y-4">
                  <Input
                    {...register('password')}
                    type="password"
                    label={t('auth.password')}
                    required
                    error={errors.password?.message}
                    placeholder={t('auth.passwordPlaceholder')}
                    helperText=""
                    prefix={
                      <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                      </svg>
                    }
                  />

                  <Input
                    {...register('password_confirm')}
                    type="password"
                    label={t('auth.confirmPassword')}
                    required
                    error={errors.password_confirm?.message}
                    placeholder={t('auth.confirmPassword')}
                    prefix={
                      <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                    }
                  />
                </div>

                {/* Submit Button */}
                <Button
                  type="submit"
                  fullWidth
                  size="lg"
                  loading={isLoading}
                  className="font-semibold"
                >
                  {isLoading ? t('auth.registering') : t('auth.register')}
                </Button>
              </form>
            </CardBody>
          </Card>

          {/* Login Link */}
          <div className="mt-6 text-center">
            <p className="text-sm text-gray-600">
              {t('auth.hasAccount')}{' '}
              <Link
                href="/login"
                className="font-semibold text-blue-600 hover:text-blue-700 transition-colors"
              >
                {t('auth.signIn')}
              </Link>
            </p>
          </div>

        </div>
      </div>

      {/* Bottom Decoration */}
      <div className="h-2 bg-gradient-to-r from-blue-600 via-blue-500 to-blue-600"></div>
    </div>
  );
}
